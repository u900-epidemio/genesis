/*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

manifest {
  name = 'Variant Calling Tumospec'
  description = 'Nextflow pipeline for variant calling analysis for the Tumospec project'
  homePage = 'https://gitlab.curie.fr/data-analysis/tumospec/-/tree/tumospec'
  author = 'Institut Curie - Bioinformatics core facility'
  version = '0.1'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
}


/**********
 * Params *
 **********/

conda.enabled = true
trace.overwrite = true
dag.overwrite = true
report.overwrite = true
timeline.overwrite = true

params {
  help = false
  name = false
  samplePlan = false
  design = false


  // Analysis parameters
  genome = false
  singleEnd = false
  reads = null
  readPaths = null
  multiqcConfig = "$baseDir/assets/multiqcConfig.yaml"
  metadata = "$baseDir/assets/metadata.tsv"

  snpeffDb = false
  genes_tumospec = "$baseDir/data/gene_position_hg38_tumospec.csv"
  var_types = "$baseDir/data/variants_types.txt"
  samples_plan = "$baseDir/data/samples_tumospec.csv"
  exons_tumospec = "$baseDir/data/exon_hg38_tumospec.csv"
  cadd_conf= "$baseDir/bin/cadd.conf"


  skipMultiQC = false
  skipSoftVersions = false

  // Output directories
  outDir = "${baseDir}/results"
  summaryDir = "${params.outDir}/Summary"

  // Parameters for tools
  // Trimgalore
  baseQualityScoreEnd = 10
  fragmentSize = 10
  
  // Samtools filtering
  flag = 4
  mappingQuality = 10
    
  // Samtools mpileup
  maxReads = 100000
  baseQualityScore = 10

  // GATK HaplotypeCaller
  variantQuality = 30

  // GATK variant filtering
  qd_filter = "filter_1_qual_by_depth"
  qd = "QD < 2.0"
  fs_filter = "filter_2_fisher_strand"
  fs = "FS > 60.0"
  sor_filter = "filter_3_strand_odds_ratio"
  sor = "SOR > 3.0"
  mq_filter = "filter_4_RMS_mapping_quality"
  mq = "MQ < 40.0"
  mqrs_filter = "filter_5_mapping_quality_rank_sum_test"
  mqrs = "MQRankSum < -12.5"
  rprs_filter = "filter_6_read_pos_rank_sum_test"
  rprs = "ReadPosRankSum < -8.0"

  // SnpSift annotate with gnomad
  ethnies = "non_cancer_AF,non_cancer_AF_eas,non_cancer_AF_asj,non_cancer_AF_afr,non_cancer_AF_amr,non_cancer_AF_nfe,non_cancer_AF_fin,non_cancer_AF_sas"

  // SnpSift annotate with dbNSFP
  scores = "VEST4_score,VEST4_rankscore,MetaSVM_score,MetaSVM_rankscore,MetaSVM_pred,MetaLR_score,MetaLR_rankscore,MetaLR_pred,Reliability_index,M-CAP_score,M-CAP_rankscore,M-CAP_pred,REVEL_score,REVEL_rankscore,BayesDel_addAF_score,BayesDel_addAF_rankscore,BayesDel_addAF_pred,BayesDel_noAF_score,BayesDel_noAF_rankscore,BayesDel_noAF_pred,ClinPred_score,ClinPred_rankscore,ClinPred_pred,DANN_score,DANN_rankscore,clinvar_id,clinvar_clnsig,clinvar_trait,clinvar_review,clinvar_hgvs,clinvar_var_source,clinvar_MedGen_id,clinvar_OMIM_id,clinvar_Orphanet_id"

  // SnpSift convert VCF into TXT
    col = "CHROM POS REF ALT 'GEN[*].AD' 'GEN[*].DP' 'ANN[*].EFFECT' 'ANN[*].GENE' 'ANN[*].FEATUREID' 'ANN[*].HGVS_C' 'ANN[*].HGVS_P' 'ANN[*].RANK' 'non_cancer_AF' 'non_cancer_AF_eas' 'non_cancer_AF_asj' 'non_cancer_AF_afr' 'non_cancer_AF_amr' 'non_cancer_AF_nfe' 'non_cancer_AF_fin' 'non_cancer_AF_sas' 'cadd_raw_v1.6' 'cadd_phred_v1.6' 'cadd_raw_v1.4' 'cadd_phred_v1.4' 'dbNSFP_VEST4_score' 'dbNSFP_VEST4_rankscore' 'dbNSFP_MetaSVM_score' 'dbNSFP_MetaSVM_rankscore' 'dbNSFP_MetaSVM_pred' 'dbNSFP_MetaLR_score' 'dbNSFP_MetaLR_rankscore' 'dbNSFP_MetaLR_pred' 'dbNSFP_Reliability_index' 'dbNSFP_REVEL_score' 'dbNSFP_REVEL_rankscore' 'dbNSFP_BayesDel_addAF_score' 'dbNSFP_BayesDel_addAF_rankscore' 'dbNSFP_BayesDel_addAF_pred' 'dbNSFP_BayesDel_noAF_score' 'dbNSFP_BayesDel_noAF_rankscore' 'dbNSFP_BayesDel_noAF_pred' 'dbNSFP_ClinPred_score' 'dbNSFP_ClinPred_rankscore' 'dbNSFP_ClinPred_pred' 'dbNSFP_DANN_score' 'dbNSFP_DANN_rankscore' 'dbNSFP_clinvar_id' 'dbNSFP_clinvar_clnsig' 'dbNSFP_clinvar_trait' 'dbNSFP_clinvar_review' 'dbNSFP_clinvar_hgvs' 'dbNSFP_clinvar_var_source' 'dbNSFP_clinvar_MedGen_id' 'dbNSFP_clinvar_OMIM_id' 'dbNSFP_clinvar_Orphanet_id'"
  // SnpSift convert VCF into TXT
//  nm = "'^#|NM_000251|NM_000179|NM_000465|NM_000249|NM_004656|NM_139076|NM_005732|NM_000535|NM_021930|NM_005431|NM_002485|NM_000314|NM_005591|NM_000051|NM_020937|NM_133509|NM_024675|NM_004360|NM_000546|NM_001142571|NM_058216|NM_032043|NM_000455|NM_007194'"

  }

/************************
 * Configs and profiles *
 ************************/

// Additional configs
includeConfig 'conf/base.config'
includeConfig 'conf/process.config'
includeConfig 'conf/geniac.config'

// Annotation paths
includeConfig 'conf/genomes.config'

// Profiles
profiles {
  conda {
    includeConfig 'conf/conda.config'
  }
  multiconda {
    includeConfig 'conf/multiconda.config'
  }
  docker {
    includeConfig 'conf/docker.config'
  }
  singularity {
    includeConfig 'conf/singularity.config'
  }
  path {
    includeConfig 'conf/path.config'
  }
  multipath {
    includeConfig 'conf/multipath.config'
  }
  cluster {
    includeConfig 'conf/cluster.config'
  }
  test{
    includeConfig 'conf/test.config'
  }
}

